// src/core/humanizer.js
const { getRandomSentence } = require("../utils/dataProvider");

function logAction(type, msg) {
  const typeMap = {
    wait: "‚è≥",
    typing: "‚úçÔ∏è",
    click: "üñ±Ô∏è",
    scroll: "‚ÜïÔ∏è",
    nav: "üß≠",
    info: "‚ÑπÔ∏è",
    error: "‚ùå",
  };
  console.log(`${typeMap[type] || "üé¨"} [${type}] ${msg}`);
}

function randomWait(min, max) {
  const duration = parseFloat((Math.random() * (max - min) + min).toFixed(3));
  logAction("wait", `Ch·ªù trong ${duration} gi√¢y...`);
  return new Promise((resolve) => setTimeout(resolve, duration * 1000));
}
async function smartWait(context, persona) {
  const delays = {
    after_page_load: { min: 1.5, max: 3 },
    before_major_click: { min: 1, max: 2.5 },
    after_scroll: { min: 1.2, max: 2 },
    typing_word_pause: { min: 0.3, max: 0.7 },
    long_pause: { min: 6, max: 12 }, // <-- Th√™m pause d√†i
  };
  const delayConfig = delays[context] || { min: 1, max: 2 };

  // √Åp d·ª•ng "t√¢m tr·∫°ng" c·ªßa persona ƒë·ªÉ ƒëi·ªÅu ch·ªânh delay
  const speedFactor = persona?.browseSpeed ? (1 / persona.browseSpeed) * 4 : 1;

  await randomWait(
    delayConfig.min * speedFactor,
    delayConfig.max * speedFactor
  );
}

async function simulateFocusBlur(page, selector) {
  logAction("info", `ü§î Do d·ª± v·ªõi element: ${selector}`);
  try {
    await page.focus(selector);
    await randomWait(0.8, 1.5);
    await page.evaluate(() => document.activeElement.blur()); // B·ªè focus
    await randomWait(0.5, 1);
  } catch (e) {
    /* B·ªè qua n·∫øu l·ªói */
  }
}

async function humanLikeTyping(page, selector, text, persona) {
  await page.click(selector);

  // (N√ÇNG C·∫§P) B√¥i ƒëen v√† x√≥a n·ªôi dung c≈© tr∆∞·ªõc khi g√µ
  console.log("‚úçÔ∏è  X√≥a n·ªôi dung c≈© (Ctrl+A -> Backspace)...");
  await page.keyboard.down("Control");
  await page.keyboard.press("a");
  await page.keyboard.up("Control");
  await page.keyboard.press("Backspace");
  await randomWait(0.2, 0.5); // Ch·ªù m·ªôt ch√∫t sau khi x√≥a

  const mistakeRate = persona ? persona.mistakeRate : 0.1;
  const { min: minDelay, max: maxDelay } = persona
    ? persona.typingDelay
    : { min: 0.05, max: 0.15 };

  // B·∫£n ƒë·ªì c√°c k√Ω t·ª± ti·∫øng Vi·ªát v√† k√Ω t·ª± g·ªëc kh√¥ng d·∫•u
  const mistakeChars = {
    √°: "a",
    √†: "a",
    ·∫°: "a",
    √£: "a",
    √¢: "a",
    ·∫•: "a",
    ·∫ß: "a",
    ·∫≠: "a",
    ·∫´: "a",
    ƒÉ: "a",
    ·∫Ø: "a",
    ·∫±: "a",
    ·∫∑: "a",
    ·∫µ: "a",
    √©: "e",
    √®: "e",
    ·∫π: "e",
    ·∫Ω: "e",
    √™: "e",
    ·∫ø: "e",
    ·ªÅ: "e",
    ·ªá: "e",
    ·ªÖ: "e",
    √≠: "i",
    √¨: "i",
    ·ªã: "i",
    ƒ©: "i",
    √≥: "o",
    √≤: "o",
    ·ªç: "o",
    √µ: "o",
    √¥: "o",
    ·ªë: "o",
    ·ªì: "o",
    ·ªô: "o",
    ·ªó: "o",
    ∆°: "o",
    ·ªõ: "o",
    ·ªù: "o",
    ·ª£: "o",
    ·ª°: "o",
    √∫: "u",
    √π: "u",
    ·ª•: "u",
    ≈©: "u",
    ∆∞: "u",
    ·ª©: "u",
    ·ª´: "u",
    ·ª±: "u",
    ·ªØ: "u",
    √Ω: "y",
    ·ª≥: "y",
    ·ªµ: "y",
    ·ªπ: "y",
    ƒë: "d",
  };

  if (Math.random() < 0.1) {
    console.log("‚úçÔ∏è  [typing] G√µ l·∫∑p m·ªôt c·ª•m t·ª´ r·ªìi x√≥a...");
    const phrase = text.substring(0, Math.floor(text.length * 0.4));
    await page.keyboard.type(phrase, { delay: 80 });
    await useKeyboardShortcut(page, "a");
    await page.keyboard.press("Backspace");
  }

  for (const char of text) {
    // Quy·∫øt ƒë·ªãnh xem c√≥ m·∫Øc l·ªói kh√¥ng
    if (Math.random() < mistakeRate) {
      // N·∫øu k√Ω t·ª± l√† ti·∫øng Vi·ªát c√≥ d·∫•u, 70% kh·∫£ nƒÉng s·∫Ω m·∫Øc l·ªói "qu√™n d·∫•u"
      if (mistakeChars[char] && Math.random() < 0.7) {
        console.log("‚å®Ô∏è  G√µ thi·∫øu d·∫•u, x√≥a l·∫°i...");
        await page.keyboard.type(mistakeChars[char]); // G√µ k√Ω t·ª± kh√¥ng d·∫•u
        await new Promise((r) =>
          setTimeout(r, (Math.random() * (0.4 - 0.2) + 0.2) * 1000)
        );
        await page.keyboard.press("Backspace");
      } else {
        // 30% c√≤n l·∫°i ho·∫∑c c√°c k√Ω t·ª± kh√°c, m·∫Øc l·ªói g√µ nh·∫ßm ph√≠m ng·∫´u nhi√™n
        console.log("‚å®Ô∏è  G√µ nh·∫ßm ph√≠m, x√≥a l·∫°i...");
        const wrongChar = String.fromCharCode(
          97 + Math.floor(Math.random() * 26)
        );
        await page.keyboard.type(wrongChar);
        await new Promise((r) => setTimeout(r, 300 + Math.random() * 400)); // 300‚Äì700ms

        await page.keyboard.press("Backspace");
      }
    }

    // G√µ k√Ω t·ª± ƒë√∫ng
    await page.keyboard.type(char);
    await new Promise((r) =>
      setTimeout(r, (Math.random() * (maxDelay - minDelay) + minDelay) * 1000)
    );
  }
}

async function simulateTypingIntoInput(page, selector, text, persona) {
  await page.focus(selector);
  for (const char of text) {
    await page.keyboard.sendCharacter(char);
    const delay = persona?.typingDelay
      ? Math.random() * (persona.typingDelay.max - persona.typingDelay.min) +
        persona.typingDelay.min
      : Math.random() * (0.15 - 0.05) + 0.05;
    await new Promise((r) => setTimeout(r, delay * 1000));
  }
}

async function humanMoveAndClick(
  page,
  selectorOrElement,
  persona,
  retries = 1
) {
  try {
    let element;
    const targetName =
      typeof selectorOrElement === "string"
        ? selectorOrElement
        : "element ƒë√£ ch·ªçn";

    // (N√ÇNG C·∫§P) X·ª≠ l√Ω c·∫£ selector (string) v√† element handle (object)
    if (typeof selectorOrElement === "string") {
      await page.waitForSelector(selectorOrElement, {
        visible: true,
        timeout: 10000,
      });
      element = await page.$(selectorOrElement);
    } else {
      element = selectorOrElement; // ƒê√¢y l√† m·ªôt element handle ƒë√£ ƒë∆∞·ª£c truy·ªÅn v√†o
    }

    if (!element) throw new Error("Kh√¥ng th·ªÉ t√¨m th·∫•y element ƒë·ªÉ click.");

    const box = await element.boundingBox();
    if (!box)
      throw new Error("Element kh√¥ng c√≥ k√≠ch th∆∞·ªõc ho·∫∑c kh√¥ng hi·ªÉn th·ªã.");

    // ... (Ph·∫ßn logic di chu·ªôt v√† click gi·ªØ nguy√™n)
    const centerX = box.x + box.width / 2;
    const centerY = box.y + box.height / 2;
    for (let i = 0; i < 2; i++) {
      const offsetX = (Math.random() - 0.5) * box.width * 0.6;
      const offsetY = (Math.random() - 0.5) * box.height * 0.6;
      await page.mouse.move(centerX + offsetX, centerY + offsetY, {
        steps: Math.floor(Math.random() * 10) + 5,
      });
      await randomWait(0.1, 0.3);
    }
    await page.mouse.move(centerX, centerY, { steps: 10 });
    await randomWait(0.1, 0.3);
    await page.mouse.down();
    await randomWait(0.05, 0.12);
    await page.mouse.up();

    logAction("click", `Click t·ª± nhi√™n v√†o: ${targetName}`);
  } catch (e) {
    const targetName =
      typeof selectorOrElement === "string"
        ? selectorOrElement
        : "element ƒë√£ ch·ªçn";
    logAction("error", `Kh√¥ng click ƒë∆∞·ª£c v√†o ${targetName}.`);
    if (retries > 0) {
      logAction("info", `Th·ª≠ l·∫°i l·∫ßn cu·ªëi... (c√≤n ${retries} l·∫ßn)`);
      // Kh√¥ng reload khi th·ª≠ l·∫°i v·ªõi element handle, ch·ªâ √°p d·ª•ng cho selector string
      if (typeof selectorOrElement === "string") {
        await page.reload({ waitUntil: "networkidle2" });
        return humanMoveAndClick(page, selectorOrElement, persona, retries - 1);
      }
    }
    logAction("error", `Th·ª≠ l·∫°i th·∫•t b·∫°i. B·ªè qua h√†nh ƒë·ªông.`);
    throw e;
  }
}

async function randomScroll(page, persona) {
  console.log("‚ÜïÔ∏è  Cu·ªôn trang ng·∫´u nhi√™n...");
  const scrollStyle = persona?.scrollStyle || "normal";
  const scrollCount = Math.floor(Math.random() * 4) + 2;

  for (let i = 0; i < scrollCount; i++) {
    let scrollAmount;
    if (scrollStyle === "fast_jerky") {
      scrollAmount = Math.random() * 1000 - 500; // Bi√™n ƒë·ªô l·ªõn
    } else {
      // slow_smooth
      scrollAmount = Math.random() * 400 - 200; // Bi√™n ƒë·ªô nh·ªè
    }
    await page.mouse.wheel({ deltaY: scrollAmount });
    await randomWait(0.5, 1.5);

    // Th√™m h√†nh vi cu·ªôn ng∆∞·ª£c
    if (Math.random() < 0.2) {
      console.log("... cu·ªôn ng∆∞·ª£c l·∫°i m·ªôt ch√∫t");
      await page.mouse.wheel({ deltaY: -scrollAmount * 0.3 });
      await randomWait(0.5, 1);
    }
  }
}

async function performDistraction(browser, persona) {
  console.log("\n--- B·∫Øt ƒë·∫ßu h√†nh vi Ph√¢n t√¢m ---");
  let newPage;
  try {
    newPage = await browser.newPage();
    const bias = persona?.distractionBias || ["search", "news"];
    const choice = bias[Math.floor(Math.random() * bias.length)];

    if (choice === "news") {
      try {
        await newPage.goto("https://vnexpress.net", {
          waitUntil: "domcontentloaded",
          timeout: 20000,
        });
        console.log("üì∞ ƒê·ªçc b√°o t·ª´ VnExpress v√† click th·ª≠ m·ªôt tin...");
        await randomScroll(newPage, persona);

        const headlines = await newPage.$$("h3.title-news a");
        if (headlines.length > 0 && !newPage.isClosed()) {
          const link = headlines[Math.floor(Math.random() * headlines.length)];

          await Promise.allSettled([
            newPage.waitForNavigation({
              waitUntil: "domcontentloaded",
              timeout: 10000,
            }),
            link.click(),
          ]);

          if (!newPage.isClosed()) await randomScroll(newPage, persona);
        }

        if (!newPage.isClosed()) await randomWait(4, 7, persona);
      } catch (e) {
        console.warn(`‚ö†Ô∏è [news] L·ªói khi x·ª≠ l√Ω b√°o: ${e.message}`);
      }
    } else {
      try {
        await newPage.goto("https://www.google.com", {
          waitUntil: "networkidle2",
          timeout: 20000,
        });

        const query = getRandomSentence();
        console.log(`ü§î B·ªã ph√¢n t√¢m, t√¨m ki·∫øm: "${query}"`);
        await humanLikeTyping(newPage, 'textarea[name="q"]', query, persona);

        await Promise.allSettled([
          newPage.waitForNavigation({
            waitUntil: "networkidle2",
            timeout: 10000,
          }),
          newPage.keyboard.press("Enter"),
        ]);

        if (!newPage.isClosed()) {
          await randomScroll(newPage, persona);
          await randomWait(5, 8, persona);
        }
      } catch (e) {
        console.warn(`‚ö†Ô∏è [search] L·ªói khi x·ª≠ l√Ω t√¨m ki·∫øm: ${e.message}`);
      }
    }
  } catch (e) {
    console.warn(`‚ö†Ô∏è L·ªói khi ph√¢n t√¢m: ${e.message}`);
  } finally {
    console.log("üß≠ Quay tr·ªü l·∫°i c√¥ng vi·ªác ch√≠nh sau khi ph√¢n t√¢m.");
    if (newPage && !newPage.isClosed()) {
      try {
        await newPage.close();
      } catch (closeErr) {
        console.warn(`‚ö†Ô∏è L·ªói khi ƒë√≥ng tab ph√¢n t√¢m: ${closeErr.message}`);
      }
    }
  }
}

async function simulateTabSwitching(browser) {
  console.log("üìë M·ªü tab kh√°c v√† quay l·∫°i...");
  const tempPage = await browser.newPage();
  try {
    await tempPage.goto("https://vnexpress.net", {
      waitUntil: "domcontentloaded",
    });
    await randomWait(3, 6);
  } catch (e) {}
  await tempPage.close();
}

async function idleMouseMove(page) {
  const { width, height } = await page.viewport();
  const x = Math.floor(Math.random() * width);
  const y = Math.floor(Math.random() * height);
  await page.mouse.move(x, y, { steps: 15 });
  await randomWait(0.3, 0.6);
}

async function randomSelectText(page) {
  console.log("üñãÔ∏è  Th·ª≠ ch·ªçn vƒÉn b·∫£n m√¥ ph·ªèng...");
  await page.keyboard.down("Shift");
  const arrowCount = Math.floor(Math.random() * 5) + 3;
  for (let i = 0; i < arrowCount; i++) {
    await page.keyboard.press("ArrowLeft");
    await randomWait(0.05, 0.1);
  }
  await page.keyboard.up("Shift");
  await page.keyboard.down("Control");
  await page.keyboard.press("c");
  await page.keyboard.up("Control");
  await randomWait(0.3, 0.5);
}

async function hoverRandomly(page, selectors) {
  try {
    const randomSelector =
      selectors[Math.floor(Math.random() * selectors.length)];
    console.log(`üôÑ R√™ chu·ªôt qua ${randomSelector} nh∆∞ng kh√¥ng click...`);
    await page.waitForSelector(randomSelector, {
      visible: true,
      timeout: 5000,
    });
    await page.hover(randomSelector);
    await randomWait(1, 2.5);
  } catch (e) {}
}

async function simulateZoom(page) {
  console.log("ü§è Zoom nh·ªè trang xem th·ª≠...");
  await page.keyboard.down("Control");
  await page.keyboard.press("Minus");
  await page.keyboard.up("Control");
  await randomWait(1, 2);
  console.log("üëå Zoom l·∫°i nh∆∞ c≈©...");
  await page.keyboard.down("Control");
  await page.keyboard.press("Equal");
  await page.keyboard.up("Control");
}

async function useKeyboardShortcut(page, key, modifier = "Control") {
  console.log(`‚å®Ô∏è  S·ª≠ d·ª•ng ph√≠m t·∫Øt ${modifier} + ${key}...`);
  await page.keyboard.down(modifier);
  await page.keyboard.press(key);
  await page.keyboard.up(modifier);
}

async function simulateMemoryLapse(page, browser) {
  console.log("üß† [memory_lapse] H√¨nh nh∆∞ qu√™n g√¨ ƒë√≥...");
  const pages = await browser.pages();
  if (pages.length > 1) {
    // Chuy·ªÉn qua l·∫°i tab g·∫ßn nh·∫•t
    await pages[pages.length - 2].bringToFront();
    await randomWait(1, 3);
    await page.bringToFront();
  }
}
async function clickByVisibleText(page, role, visibleText) {
  const elements = await page.$$(`li[role="${role}"]`);
  for (const el of elements) {
    const text = await el.evaluate((node) =>
      node.innerText.trim().toLowerCase()
    );
    if (text.includes(visibleText.toLowerCase())) {
      await el.hover();
      await el.click();
      return true;
    }
  }
  return false;
}
async function clickContextMenuItem(page, text) {
  const menuItems = await page.$$('div[role="menuitem"]');
  for (const item of menuItems) {
    const itemText = await item.evaluate((el) => el.innerText.trim());
    if (itemText.toLowerCase().includes(text.toLowerCase())) {
      await item.hover();
      await item.click();
      return true;
    }
  }
  return false;
}
module.exports = {
  randomWait,
  humanLikeTyping,
  simulateTypingIntoInput,
  humanMoveAndClick,
  randomScroll,
  performDistraction,
  simulateTabSwitching,
  idleMouseMove,
  randomSelectText,
  hoverRandomly,
  simulateZoom,
  useKeyboardShortcut,
  smartWait,
  simulateMemoryLapse,
  clickByVisibleText,
  clickContextMenuItem,
};
