// src/actions/youtube.js

const {
  smartWait,
  humanLikeTyping,
  humanMoveAndClick,
  randomScroll,
  idleMouseMove,
} = require("../core/humanizer");

/**
 * Phi√™n b·∫£n n√¢ng cao: T√¨m ki·∫øm, xem, v√† t∆∞∆°ng t√°c s√¢u v·ªõi video tr√™n YouTube.
 * @param {import('puppeteer').Page} page
 * @param {string} keyword
 * @param {import('puppeteer').Browser} browser
 * @param {object} persona
 */
async function performYouTubeWatch(page, keyword, browser, persona) {
  console.log("--- B·∫Øt ƒë·∫ßu Module: YouTube (T∆∞∆°ng t√°c s√¢u) ---");

  await page.goto("https://www.youtube.com", { waitUntil: "networkidle2" });
  console.log("üåç ƒê√£ v√†o YouTube.");

  // X·ª≠ l√Ω b·∫£ng ch·∫•p thu·∫≠n (n·∫øu c√≥)
  try {
    const acceptButtonSelector = '[aria-label="Accept all"]';
    await page.waitForSelector(acceptButtonSelector, {
      visible: true,
      timeout: 5000,
    });
    await page.click(acceptButtonSelector);
    await page.waitForNavigation({ waitUntil: "networkidle2" });
  } catch (error) {
    /* B·ªè qua */
  }

  // 1. T√¨m ki·∫øm video
  try {
    console.log(`üîé T√¨m ki·∫øm video: "${keyword}"`);
    const searchIconButtonSelector = 'button[aria-label="Search"]';
    await humanMoveAndClick(page, searchIconButtonSelector, persona);

    const searchInputSelector = 'input[name="search_query"]';
    await page.waitForSelector(searchInputSelector, { visible: true });
    await humanLikeTyping(page, searchInputSelector, keyword, persona);
    await page.keyboard.press("Enter");

    await page.waitForSelector("ytd-video-renderer", { timeout: 20000 });
    console.log("üëç ƒê√£ t·∫£i trang k·∫øt qu·∫£ t√¨m ki·∫øm.");
  } catch (e) {
    console.warn(`‚ö†Ô∏è L·ªói khi t√¨m ki·∫øm video: ${e.message}`);
    return; // D·ª´ng n·∫øu kh√¥ng t√¨m ki·∫øm ƒë∆∞·ª£c
  }

  await smartWait("after_page_load", persona);

  // 2. Ch·ªçn v√† click v√†o video
  try {
    const videoSelector = "a#video-title";
    const videoResults = await page.$$(videoSelector);

    if (videoResults.length > 0) {
      const videoIndexToClick = Math.floor(
        Math.random() * Math.min(videoResults.length, 5)
      );
      console.log(`üñ±Ô∏è  Ch·ªçn xem video th·ª© ${videoIndexToClick + 1}...`);

      await humanMoveAndClick(page, videoResults[videoIndexToClick], persona);
      await page.waitForNavigation({ waitUntil: "networkidle2" });
      console.log("‚úÖ ƒê√£ v√†o trang xem video.");

      // 3. (N√ÇNG C·∫§P) T∆∞∆°ng t√°c trong l√∫c xem
      const watchTime = (Math.random() * 45 + 30) * 1000; // 30-75 gi√¢y
      console.log(`üé¨ ƒêang "xem" video trong ${watchTime / 1000} gi√¢y...`);

      // Ch·ªù m·ªôt ch√∫t ƒë·ªÉ video b·∫Øt ƒë·∫ßu ch·∫°y
      await smartWait("after_page_load", persona);

      // 50% c∆° h·ªôi s·∫Ω "Th√≠ch" video
      if (Math.random() < 0.5) {
        // Selector cho n√∫t Like ch∆∞a ƒë∆∞·ª£c nh·∫•n
        const likeButtonSelector =
          'like-button-view-model button[aria-pressed="false"]';
        try {
          await humanMoveAndClick(page, likeButtonSelector, persona);
          console.log('üëç ƒê√£ "Th√≠ch" video.');
        } catch (e) {
          /* B·ªè qua n·∫øu kh√¥ng t√¨m th·∫•y n√∫t like */
        }
      }

      const endTime = Date.now() + watchTime;
      while (Date.now() < endTime) {
        // Di chu·ªôt v√† cu·ªôn trang nh∆∞ ƒëang xem v√† ƒë·ªçc b√¨nh lu·∫≠n
        await idleMouseMove(page);
        await randomScroll(page, persona);

        // 20% c∆° h·ªôi t·∫°m d·ª´ng video r·ªìi xem ti·∫øp
        if (Math.random() < 0.2) {
          try {
            const videoPlayer = await page.$(".html5-main-video");
            if (videoPlayer) {
              await videoPlayer.click();
              console.log("‚è∏Ô∏è  T·∫°m d·ª´ng video...");
              await smartWait("typing_word_pause", persona);
              await videoPlayer.click();
              console.log("‚ñ∂Ô∏è  Ti·∫øp t·ª•c xem...");
            }
          } catch (e) {
            /* B·ªè qua */
          }
        }
        await smartWait("long_pause", persona);
      }
    } else {
      console.log("üü° Kh√¥ng t√¨m th·∫•y video n√†o.");
    }
  } catch (e) {
    console.warn(`‚ö†Ô∏è L·ªói khi xem video: ${e.message}`);
  }

  console.log("--- Ho√†n th√†nh Module: YouTube ---");
}

module.exports = { performYouTubeWatch };
