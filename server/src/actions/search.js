const {
  randomWait,
  humanLikeTyping,
  randomScroll,
  idleMouseMove,
} = require("../core/humanizer");

async function performGoogleSearch(page, keyword, persona, browser) {
  console.log("--- B·∫Øt ƒë·∫ßu Module: Google Search v3.1 ---");

  // 1Ô∏è‚É£ M·ªü Google
  await page.goto("https://www.google.com", { waitUntil: "networkidle2" });
  await randomWait(1, 2, persona);

  const searchInputSelector = 'textarea[name="q"]';
  await page.waitForSelector(searchInputSelector, { visible: true });

  // 2Ô∏è‚É£ Gi·∫£ l·∫≠p g√µ t·ª´ kh√≥a
  await humanLikeTyping(page, searchInputSelector, keyword, persona);
  await page.keyboard.press("Enter");
  await page.waitForNavigation({ waitUntil: "networkidle2" });

  console.log("üëç ƒê√£ t·∫£i trang k·∫øt qu·∫£ t√¨m ki·∫øm.");
  await idleMouseMove(page);

  // 3Ô∏è‚É£ V√≤ng l·∫∑p duy·ªát nhi·ªÅu trang
  const MAX_PAGES = 2; // duy·ªát 2 trang ƒë·∫ßu ti√™n
  for (let pageIndex = 1; pageIndex <= MAX_PAGES; pageIndex++) {
    console.log(`üìÑ --- ƒêang ·ªü trang k·∫øt qu·∫£ th·ª© ${pageIndex} ---`);

    await randomWait(2, 3, persona);
    await randomScroll(page, persona);

    // 3.1Ô∏è‚É£ L·∫•y danh s√°ch k·∫øt qu·∫£
    const resultsSelector = "a > h3";
    const results = await page.$$(resultsSelector);
    if (results.length === 0) {
      console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o!");
      break;
    }

    // 3.2Ô∏è‚É£ Ch·ªçn ng·∫´u nhi√™n 1-2 b√†i vi·∫øt ƒë·ªÉ ƒë·ªçc
    const articlesToRead = Math.min(2, results.length);
    const indexes = Array.from({ length: results.length }, (_, i) => i);
    indexes.sort(() => Math.random() - 0.5); // shuffle

    for (let i = 0; i < articlesToRead; i++) {
      const idx = indexes[i];
      console.log(
        `üìñ [${i + 1}/${articlesToRead}] ƒê·ªçc k·∫øt qu·∫£ th·ª© ${idx + 1}...`
      );

      try {
        const link = await page.evaluate(
          (el) => el.closest("a")?.href,
          results[idx]
        );
        if (!link) continue;

        // 4Ô∏è‚É£ M·ªü tab m·ªõi v√† ƒë·ªçc b√†i vi·∫øt
        const newPage = await browser.newPage();
        await newPage.goto(link, {
          waitUntil: "domcontentloaded",
          timeout: 30000,
        });

        await randomWait(1, 2, persona);
        await randomScroll(newPage, persona);
        await randomWait(1, 2, persona);

        // ƒê√≥ng tab an to√†n
        try {
          await newPage.close({ runBeforeUnload: true });
          await randomWait(0.5, 1.2, persona); // Delay ƒë·ªÉ Chrome ·ªïn ƒë·ªãnh
        } catch (e) {
          console.log("‚ö†Ô∏è L·ªói khi ƒë√≥ng tab:", e.message);
        }
      } catch (err) {
        console.log("‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω k·∫øt qu·∫£:", err.message);
      }
    }

    // 5Ô∏è‚É£ Chuy·ªÉn sang trang ti·∫øp theo n·∫øu c√≥
    try {
      const nextBtn = await page.$('a#pnnext, a[aria-label="Trang ti·∫øp theo"]');
      if (nextBtn && pageIndex < MAX_PAGES) {
        await nextBtn.click();
        await page.waitForNavigation({
          waitUntil: "networkidle2",
          timeout: 20000,
        });
      } else {
        console.log("üü° Kh√¥ng t√¨m th·∫•y n√∫t 'Trang ti·∫øp theo'. K·∫øt th√∫c.");
        break;
      }
    } catch (err) {
      console.log("‚ö†Ô∏è Kh√¥ng th·ªÉ chuy·ªÉn trang:", err.message);
      break;
    }
  }

  console.log("--- Ho√†n th√†nh Module: Google Search ---");
}

module.exports = { performGoogleSearch };
