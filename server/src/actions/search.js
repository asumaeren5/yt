const {
  randomWait,
  humanLikeTyping,
  randomScroll,
  smartWait,
  advancedScroll, // <-- Th√™m import,
  performDistraction, // Import m·ªõi
  idleMouseMove, // Import m·ªõi
  hoverRandomly, // Import m·ªõi
  randomSelectTextV2,
  simulateTabSwitching,
} = require("../core/humanizer");

async function clickGoogleTab(page, tabText) {
  try {
    console.log(`üß≠ ƒêang t√¨m tab: "${tabText}"...`);
    const tabXPath = `//div[@role="navigation"]//a[contains(., '${tabText}')]`;
    const [tabLink] = await page.$$("xpath/" + tabXPath);

    if (tabLink) {
      // **S·ª¨A L·ªñI**: Ki·ªÉm tra xem tab c√≥ ƒëang ƒë∆∞·ª£c ch·ªçn kh√¥ng (aria-selected="true")
      const isSelected = await tabLink.evaluate(
        (el) => el.getAttribute("aria-selected") === "true"
      );

      if (isSelected) {
        console.log(`...ƒê√£ ·ªü s·∫µn tr√™n tab "${tabText}", b·ªè qua.`);
        return true;
      }

      console.log(`üñ±Ô∏è  Click v√†o tab "${tabText}".`);
      await tabLink.click();
      await page.waitForNavigation({
        waitUntil: "networkidle2",
        timeout: 20000,
      });
      return true;
    }

    console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tab "${tabText}".`);
    return false;
  } catch (e) {
    console.error(`‚ùå L·ªói khi click tab "${tabText}": ${e.message}`);
    return false;
  }
}

async function performGoogleSearch(page, keyword, browser, persona) {
  console.log(
    "--- B·∫Øt ƒë·∫ßu Module: Google Search v9.4 (Ch·ªëng S·∫≠p Tr√¨nh Duy·ªát) ---"
  );

  // ... (Ph·∫ßn t√¨m ki·∫øm ban ƒë·∫ßu gi·ªØ nguy√™n)
  await page.goto("https://www.google.com", { waitUntil: "networkidle2" });
  await hoverRandomly(page, [
    '[aria-label="T√¨m ki·∫øm b·∫±ng gi·ªçng n√≥i"]',
    '[aria-label="T√¨m ki·∫øm h√¨nh ·∫£nh"]',
  ]);
  const searchInputSelector = 'textarea[name="q"]';
  await page.waitForSelector(searchInputSelector, { visible: true });
  await humanLikeTyping(page, searchInputSelector, keyword, persona);
  await page.keyboard.press("Enter");
  await page.waitForNavigation({ waitUntil: "networkidle2" });
  console.log("üëç ƒê√£ t·∫£i trang k·∫øt qu·∫£ t√¨m ki·∫øm.");
  await smartWait("long_pause", persona);

  // === T·∫†O M·ªòT DANH S√ÅCH H√ÄNH VI NG·∫™U NHI√äN ===
  const optionalTasks = [];
  if (Math.random() < 0.7) optionalTasks.push("images");
  if (Math.random() < 0.6) optionalTasks.push("news");
  if (Math.random() < (persona.distractionChance || 0.4))
    optionalTasks.push("distraction");

  // X√°o tr·ªôn danh s√°ch ƒë·ªÉ th·ª© t·ª± th·ª±c hi·ªán lu√¥n kh√°c nhau
  optionalTasks.sort(() => Math.random() - 0.5);

  for (const task of optionalTasks) {
    if (task === "images") {
      if (await clickGoogleTab(page, "H√¨nh ·∫£nh")) {
        console.log("üñºÔ∏è  B·∫Øt ƒë·∫ßu t∆∞∆°ng t√°c v·ªõi k·∫øt qu·∫£ h√¨nh ·∫£nh...");
        await idleMouseMove(page);
        await randomScroll(page, persona);
        const imageResultsSelector = "div[data-docid]";
        await page.waitForSelector(imageResultsSelector, { timeout: 30000 });
        const imagesToView = Math.floor(Math.random() * 3) + 3;
        console.log(`üñºÔ∏è  S·∫Ω xem ${imagesToView} h√¨nh ·∫£nh...`);

        for (let i = 0; i < imagesToView; i++) {
          let newPage = null;
          try {
            const images = await page.$$(imageResultsSelector);
            if (i >= images.length) break;

            console.log(`[·∫¢nh ${i + 1}/${imagesToView}] M·ªü ·∫£nh...`);
            await images[i].click();
            await randomWait(1, 2); // Ch·ªù 1-2 gi√¢y cho khung xem tr∆∞·ªõc t·∫£i

            const visitButtonXPath = `//a[contains(., "Truy c·∫≠p")]`;
            // **S·ª¨A L·ªñI**: Ki·ªÉm tra nhanh s·ª± t·ªìn t·∫°i c·ªßa n√∫t
            const [visitButton] = await page.$$("xpath/" + visitButtonXPath);

            if (visitButton) {
              // N·∫øu c√≥ n√∫t, th·ª±c hi·ªán logic c≈©
              const url = await visitButton.evaluate((a) => a.href);
              if (!url) throw new Error("Kh√¥ng l·∫•y ƒë∆∞·ª£c URL");

              console.log(`\tüîó M·ªü link ngu·ªìn: ${url}`);
              newPage = await browser.newPage();
              await newPage.goto(url, {
                waitUntil: "domcontentloaded",
                timeout: 40000,
              });
              await advancedScroll(newPage);
              await newPage.close();
            } else {
              // N·∫øu kh√¥ng c√≥ n√∫t, ghi nh·∫≠n v√† b·ªè qua
              console.log("\t...·∫¢nh n√†y kh√¥ng c√≥ n√∫t 'Truy c·∫≠p', b·ªè qua.");
              await randomWait(2, 4); // Gi·∫£ v·ªù xem ·∫£nh trong 2-4 gi√¢y
            }

            await page.keyboard.press("Escape");
            await randomWait(1, 2);
          } catch (err) {
            console.warn(`‚ö†Ô∏è L·ªói khi xem ·∫£nh th·ª© ${i + 1}: ${err.message}`);
            if (newPage && !newPage.isClosed()) await newPage.close();

            // C·ªë g·∫Øng ƒë√≥ng khung xem tr∆∞·ªõc n·∫øu c√≤n
            const [stuckVisitButton] = await page.$$(
              "xpath/" + `//a[contains(., "Truy c·∫≠p")]`
            );
            const closeButtonXPath = `//button[@aria-label="ƒê√≥ng"]`;
            const [stuckCloseButton] = await page.$$(
              "xpath/" + closeButtonXPath
            );
            if (stuckVisitButton || stuckCloseButton) {
              console.log("...C·ªë g·∫Øng ƒë√≥ng khung xem tr∆∞·ªõc b·ªã k·∫πt.");
              await page.keyboard.press("Escape");
            }
            await randomWait(1, 2);
          }
        }
      }
    } else if (task === "news") {
      if (await clickGoogleTab(page, "Tin t·ª©c")) {
        console.log("üì∞ ƒêang xem c√°c k·∫øt qu·∫£ tin t·ª©c...");
        await advancedScroll(page);
        const articles = await page.$$("a.WlydOe");
        if (articles.length > 0) {
          const articleLink =
            articles[Math.floor(Math.random() * articles.length)];
          const url = await articleLink.evaluate((a) => a.href);
          if (url) await readContentInNewTab(url, browser, persona);
        }
      }
    } else if (task === "distraction") {
      await performDistraction(browser, persona);
    }
  }

  // Quay l·∫°i tab "T·∫•t c·∫£" ƒë·ªÉ ti·∫øp t·ª•c logic c≈© (n·∫øu c·∫ßn)
  await clickGoogleTab(page, "T·∫•t c·∫£");

  const resultsXPath = "//div[@id='search']//a[h3]";
  await page.waitForSelector("xpath/" + resultsXPath, { timeout: 20000 });
  const results = await page.$$("xpath/" + resultsXPath);

  if (results.length > 0) {
    const resultToRead =
      results[Math.floor(Math.random() * Math.min(results.length, 5))];
    const url = await resultToRead.evaluate((a) => a.href);
    if (url) {
      console.log(`üìñ Quy·∫øt ƒë·ªãnh ƒë·ªçc b√†i vi·∫øt ch√≠nh: ${url}`);
      await readContentInNewTab(url, browser, persona);
    }
  }

  console.log("--- Ho√†n th√†nh Module: Google Search ---");
}

async function readContentInNewTab(url, browser, persona) {
  let newPage = null;
  try {
    newPage = await browser.newPage();
    await newPage.goto(url, { waitUntil: "domcontentloaded", timeout: 40000 });
    console.log(`\t... ƒêang "ƒë·ªçc" n·ªôi dung t·ª´: ${url}`);

    if (newPage.isClosed()) return;
    await advancedScroll(newPage);

    if (newPage.isClosed()) return;
    if (Math.random() < 0.4) await idleMouseMove(newPage);

    if (newPage.isClosed()) return;
    if (Math.random() < 0.3) await randomSelectTextV2(newPage);

    if (newPage.isClosed()) return;
    if (Math.random() < 0.25) await simulateTabSwitching(browser);

    if (newPage.isClosed()) return;
    await smartWait("long_pause", persona);

    if (!newPage.isClosed()) {
      await newPage.close();
    }
  } catch (e) {
    console.warn(`‚ö†Ô∏è L·ªói khi ƒë·ªçc n·ªôi dung t·ª´ tab m·ªõi: ${e.message}`);
    // **S·ª¨A L·ªñI**: Ki·ªÉm tra lo·∫°i l·ªói. N·∫øu l√† l·ªói k·∫øt n·ªëi, kh√¥ng l√†m g√¨ c·∫£.
    const errorMessage = e.message.toLowerCase();
    if (
      errorMessage.includes("connection closed") ||
      errorMessage.includes("detached frame")
    ) {
      console.log(
        "...K·∫øt n·ªëi ƒë·∫øn tab ƒë√£ b·ªã ƒë√≥ng b·ªüi trang web. B·ªè qua v√† ti·∫øp t·ª•c."
      );
      return; // Tho√°t kh·ªèi h√†m m·ªôt c√°ch an to√†n
    }

    // ƒê·ªëi v·ªõi c√°c l·ªói kh√°c, v·∫´n c·ªë g·∫Øng ƒë√≥ng tab
    if (newPage && !newPage.isClosed()) {
      await newPage.close();
    }
  }
}

module.exports = { performGoogleSearch };
